# -*- coding: utf-8 -*-
"""jaroflove

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hnGIRppBDbYnY214WYh6b9xcROsJC6nt
"""

import streamlit as st
import matplotlib.pyplot as plt
import matplotlib.patches as patches

# Function to display the cylinder
def display_cylinder(fill_height, is_final=False):
    # Define cylinder dimensions
    cylinder_width = 2
    cylinder_height = 4

    # Create a figure and axis for the cylinder
    fig, ax = plt.subplots(figsize=(6, 8))

    # Draw the cylinder (outer boundary)
    ax.add_patch(
        patches.Rectangle(
            (0, 0), cylinder_width, cylinder_height, linewidth=2, edgecolor="black", facecolor="lightgray"
        )
    )

    # Draw the filled part of the cylinder
    ax.add_patch(
        patches.Rectangle(
            (0, 0), cylinder_width, fill_height, linewidth=0, edgecolor="black", facecolor="red"
        )
    )

    # Set the limits of the plot to match the cylinder size
    ax.set_xlim(0, cylinder_width)
    ax.set_ylim(0, cylinder_height)

    # Remove axes for a cleaner look
    ax.axis("off")

    # Display the plot
    if is_final:
        st.write("Final Cylinder:")
    st.pyplot(fig)

# Function to handle the quiz logic
def ask_question(question, choices, correct_answer, question_index, correct_answers):
    st.write(question)
    user_choice = st.radio("Choose an answer:", choices, key=f"question_{question_index}")
    return user_choice

# Function for the final message and full cylinder display
def final_message(correct_answers, total_questions):
    if correct_answers == total_questions:
        st.write("The cylinder is full of love!")
        st.write(f"You answered {correct_answers}/{total_questions} correctly.")
        st.write("Evidently, you are always right. <3")
    else:
        st.write("The cylinder is not full of love!")
        st.write(f"You answered {correct_answers}/{total_questions} correctly.")
        st.write("But no matter what, you are always right. <3")

    # Display the 100% full cylinder
    display_cylinder(4, is_final=True)

# Main app logic
def main():
    # List of questions, choices, and correct answers
    questions = [
        {"question": "What do I love most about you?", "choices": ["Humor", "Sex", "Affirmation", "Calling me out"], "correct_answer": "Calling me out"},
        {"question": "What do you think, I would choose as your favorite food?", "choices": ["Buldwak Ramen", "Thai soup", "Pasta", "Borger"], "correct_answer": "Buldwak Ramen"},
        {"question": "Where did we first meet?", "choices": ["Dream", "Cafe", "2 no. gate", "Your garage"], "correct_answer": "Cafe"},
        {"question": "What do you think, I would choose as your favorite movie from the options below?", "choices": ["Tangled", "Howls Moving Castle", "Whisper of the Heart", "From up on poppy hill"], "correct_answer": "Tangled"},
        {"question": "What's your dream vacation destination, I would choose?", "choices": ["Maldives", "Okinawa", "Bali", "Malaysia"], "correct_answer": "Bali"},
        {"question": "What our favorite hobby?", "choices": ["Reading", "Cooking", "Talking", "Laying down doing nothing"], "correct_answer": "Talking"},
        {"question": "Which animal I would bring home that you would love?", "choices": ["Dog", "Cat", "Hamster", "Tiger"], "correct_answer": "Cat"},
        {"question": "What's our favorite season?", "choices": ["Winter", "Spring", "Summer", "Autumn"], "correct_answer": "Spring"},
        {"question": "What type of music do I think, you like?", "choices": ["Pop", "Rock", "Classical", "Indie"], "correct_answer": "Indie"},
        {"question": "What do you think, I would choose as your favorite movie from the options below?", "choices": ["The Notebook", "Little Women", "Shrek", "Pride and Prejudice"], "correct_answer": "Little Women"},
    ]

    # Initialize session state to track the current question and correct answers
    if "question_index" not in st.session_state:
        st.session_state.question_index = 0
    if "correct_answers" not in st.session_state:
        st.session_state.correct_answers = 0

    # Get the current question
    current_question = questions[st.session_state.question_index]

    # Ask the current question
    user_choice = ask_question(
        current_question["question"],
        current_question["choices"],
        current_question["correct_answer"],
        st.session_state.question_index,
        st.session_state.correct_answers,
    )

    # Update the cylinder after the user selects an answer
    if st.button("Next"):
        # Check the answer and update the score
        if user_choice == current_question["correct_answer"]:
            st.session_state.correct_answers += 1
            st.success("Correct!")
        else:
            st.error(f"Incorrect! The correct answer was: {current_question['correct_answer']}")

        # Update the cylinder fill based on the current score
        current_fill_height = (
            st.session_state.correct_answers / len(questions)
        ) * 4  # Fill height proportional to the score
        display_cylinder(current_fill_height)

        # Move to the next question or display the final message
        if st.session_state.question_index < len(questions) - 1:
            st.session_state.question_index += 1
        else:
            final_message(st.session_state.correct_answers, len(questions))

# Run the app
if __name__ == "__main__":
    main()