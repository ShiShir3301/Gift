# -*- coding: utf-8 -*-
"""jaroflove

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hnGIRppBDbYnY214WYh6b9xcROsJC6nt
"""

import streamlit as st
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import time

# Function to display and animate the "cylinder" filling
def display_cylinder(fill_height):
    cylinder_width = 1  # Width of the cylinder
    cylinder_height = 2  # Height of the cylinder

    fig, ax = plt.subplots(figsize=(3, 4))
    ax.add_patch(patches.Rectangle((0, 0), cylinder_width, cylinder_height, linewidth=2, edgecolor='black', facecolor='lightgray'))
    ax.add_patch(patches.Rectangle((0, 0), cylinder_width, fill_height, linewidth=0, edgecolor='black', facecolor='red'))
    ax.set_xlim(0, cylinder_width)
    ax.set_ylim(0, cylinder_height)
    ax.axis('off')
    return fig

# Function to animate the cylinder gradually to 100%
def slowly_fill_cylinder(start_fill_height):
    target_fill_height = 2
    increment = 0.2
    cylinder_placeholder = st.empty()

    current_fill_height = start_fill_height
    while current_fill_height < target_fill_height:
        fig = display_cylinder(current_fill_height)
        cylinder_placeholder.pyplot(fig)
        current_fill_height += increment
        time.sleep(0.1)

    fig = display_cylinder(target_fill_height)
    cylinder_placeholder.pyplot(fig)

# Function for final message
def final_message(correct_answers, total_questions):
    if correct_answers == total_questions:
        st.write("The cylinder is full of love!")
        st.write(f"You answered {correct_answers}/{total_questions} correctly.")
        st.write("Evidently, you are always right. <3")
    else:
        st.write("The cylinder is not full of love!")
        st.write(f"You answered {correct_answers}/{total_questions} correctly.")
        st.write("But no matter what, you are always right. <3")
        start_fill_height = (correct_answers / total_questions) * 2
        slowly_fill_cylinder(start_fill_height)

# Main app logic
def main():
    questions = [
        {"question": "What do I love most about you?", "choices": ["Humor", "Sex", "Affirmation", "Calling me out"], "correct_answer": "Calling me out"},
        {"question": "What do you think, I would choose as your favorite food?", "choices": ["Buldwak Ramen", "Thai soup", "Pasta", "Borger"], "correct_answer": "Buldwak Ramen"},
        {"question": "Where did we first meet?", "choices": ["Dream", "Cafe", "2 no. gate", "Your garage"], "correct_answer": "Cafe"},
        {"question": "What do you think, I would choose as your favorite movie from the options below?", "choices": ["Tangled", "Howls Moving Castle", "Whisper of the Heart", "From up on poppy hill"], "correct_answer": "Tangled"},
        {"question": "What's your dream vacation destination, I would choose?", "choices": ["Maldives", "Okinawa", "Bali", "Malaysia"], "correct_answer": "Bali"},
        {"question": "What our favorite hobby?", "choices": ["Reading", "Cooking", "Talking", "Laying down doing nothing"], "correct_answer": "Talking"},
        {"question": "Which animal I would bring home that you would love?", "choices": ["Dog", "Cat", "Hamster", "Tiger"], "correct_answer": "Cat"},
        {"question": "What's our favorite season?", "choices": ["Winter", "Spring", "Summer", "Autumn"], "correct_answer": "Spring"},
        {"question": "What type of music do I think, you like?", "choices": ["Pop", "Rock", "Classical", "Indie"], "correct_answer": "Indie"},
        {"question": "What do you think, I would choose as your favorite movie from the options below?", "choices": ["The Notebook", "Little Women", "Shrek", "Pride and Prejudice"], "correct_answer": "Little Women"},
    ]

    if "question_index" not in st.session_state:
        st.session_state.question_index = 0
    if "correct_answers" not in st.session_state:
        st.session_state.correct_answers = 0
    if "show_feedback" not in st.session_state:
        st.session_state.show_feedback = False
    if "last_correct" not in st.session_state:
        st.session_state.last_correct = None

    current_question = questions[st.session_state.question_index]

    if not st.session_state.show_feedback:
        st.write(current_question["question"])
        user_choice = st.radio("Choose an answer:", current_question["choices"], key=f"question_{st.session_state.question_index}")

        if st.button("Next"):
            if user_choice == current_question["correct_answer"]:
                st.session_state.correct_answers += 1
                st.session_state.last_correct = True
            else:
                st.session_state.last_correct = False

            st.session_state.show_feedback = True
    else:
        if st.session_state.last_correct:
            st.success("Correct!")
        else:
            st.error(f"Wrong! The correct answer was: {current_question['correct_answer']}")

        if st.button("Next Question"):
            if st.session_state.question_index < len(questions) - 1:
                st.session_state.question_index += 1
                st.session_state.show_feedback = False
            else:
                final_message(st.session_state.correct_answers, len(questions))

if __name__ == "__main__":
    main()